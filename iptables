Linux默认是允许Ping响应的，系统是否允许Ping由2个因素决定的：A、内核参数，B、防火墙，需要2个因素同时允许才能允许Ping，2个因素有任意一个禁Ping就无法Ping。
 
具体的配置方法如下：
 
 A、内核参数设置
       1、允许PING设置
        A.临时允许PING操作的命令为：#echo 0 >/proc/sys/net/ipv4/icmp_echo_ignore_all
         B.永久允许PING配置方法。
              /etc/sysctl.conf 中增加一行
　　            net.ipv4.icmp_echo_ignore_all=1
          如果已经有net.ipv4.icmp_echo_ignore_all这一行了，直接修改=号后面的值即可的（0表示允许，1表示禁止）。
          修改完成后执行sysctl -p使新配置生效。
         
       2、禁止Ping设置     
         A.临时禁止PING的命令为：#echo 1 >/proc/sys/net/ipv4/icmp_echo_ignore_all     
       B.永久允许PING配置方法。
              /etc/sysctl.conf 中增加一行
　　            net.ipv4.icmp_echo_ignore_all=0
         如果已经有net.ipv4.icmp_echo_ignore_all这一行了，直接修改=号后面的值即可的。（0表示允许，1表示禁止）
         修改完成后执行sysctl -p使新配置生效。

/isam/scripts # iptables -p icmp --help 
iptables v1.8.4

Usage: iptables -[ACD] chain rule-specification [options]
       iptables -I chain [rulenum] rule-specification [options]
       iptables -R chain rulenum rule-specification [options]
       iptables -D chain rulenum [options]
       iptables -[LS] [chain [rulenum]] [options]
       iptables -[FZ] [chain] [options]
       iptables -[NX] chain
       iptables -E old-chain-name new-chain-name
       iptables -P chain target [options]
       iptables -h (print this help information)

Commands:
Either long or short options are allowed.
  --append  -A chain            Append to chain
  --check   -C chain            Check for the existence of a rule
  --delete  -D chain            Delete matching rule from chain
  --delete  -D chain rulenum
                                Delete rule rulenum (1 = first) from chain
  --insert  -I chain [rulenum]
                                Insert in chain as rulenum (default 1=first)
  --replace -R chain rulenum
                                Replace rule rulenum (1 = first) in chain
  --list    -L [chain [rulenum]]
                                List the rules in a chain or all chains
  --list-rules -S [chain [rulenum]]
                                Print the rules in a chain or all chains
  --flush   -F [chain]          Delete all rules in  chain or all chains
  --zero    -Z [chain [rulenum]]
                                Zero counters in chain or all chains
  --new     -N chain            Create a new user-defined chain
  --delete-chain
            -X [chain]          Delete a user-defined chain
  --policy  -P chain target
                                Change policy on chain to target
  --rename-chain
            -E old-chain new-chain
                                Change chain name, (moving any references)
Options:
    --ipv4      -4              Nothing (line is ignored by ip6tables-restore)
    --ipv6      -6              Error (line is ignored by iptables-restore)
[!] --protocol  -p proto        protocol: by number or name, eg. `tcp'
[!] --source    -s address[/mask][...]
                                source specification
[!] --destination -d address[/mask][...]
                                destination specification
[!] --in-interface -i input name[+]
                                network interface name ([+] for wildcard)
 --jump -j target
                                target for rule (may load target extension)
  --goto      -g chain
                              jump to chain with no return
  --match       -m match
                                extended match (may load extension)
  --numeric     -n              numeric output of addresses and ports
[!] --out-interface -o output name[+]
                                network interface name ([+] for wildcard)
  --table       -t table        table to manipulate (default: `filter')
  --verbose     -v              verbose mode
  --wait        -w [seconds]    maximum wait to acquire xtables lock before give up
  --wait-interval -W [usecs]    wait time to try to acquire xtables lock
                                default is 1 second
  --line-numbers                print line numbers when listing
  --exact       -x              expand numbers (display exact values)
[!] --fragment  -f              match second or further fragments only
  --modprobe=<command>          try to insert modules using this command
  --set-counters PKTS BYTES     set the counter during insert/append
[!] --version   -V              print package version.

icmp match options:
[!] --icmp-type typename        match icmp type
[!] --icmp-type type[/code]     (or numeric type or type/code)
Valid ICMP Types:
any
echo-reply (pong)
destination-unreachable
   network-unreachable
   host-unreachable
   protocol-unreachable
   port-unreachable
   fragmentation-needed
   source-route-failed
   network-unknown
   host-unknown
   network-prohibited
   host-prohibited
   TOS-network-unreachable
   TOS-host-unreachable
   communication-prohibited
   host-precedence-violation
   precedence-cutoff
   source-quench
   redirect
   network-redirect
   host-redirect
   TOS-network-redirect
   TOS-host-redirect
   echo-request (ping)
   router-advertisement
   router-solicitation
   time-exceeded (ttl-exceeded)
   ttl-zero-during-transit
   ttl-zero-during-reassembly
   parameter-problem
   ip-header-bad
   required-option-missing
   timestamp-request
   timestamp-reply
  address-mask-request
  address-mask-reply
/isam/scripts #
          
 
 
    B、防火墙设置（注：此处的方法的前提是内核配置是默认值，也就是没有禁止Ping）
     这里以Iptables防火墙为例，其他防火墙操作方法可参考防火墙的官方文档。
     1、允许PING设置      
        iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
        iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT
       或者也可以临时停止防火墙操作的。
        service iptables stop
 
     2、禁止PING设置
        iptables -A INPUT -p icmp --icmp-type 8 -s 0/0 -j DROP


iptables -L -n --line-number

/isam/scripts # iptables -L -n --line-number
Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination         
1    handle_mgnt  all  --  0.0.0.0/0            0.0.0.0/0           
2    handle_mgnt  all  --  0.0.0.0/0            0.0.0.0/0           

Chain FORWARD (policy ACCEPT)
num  target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
num  target     prot opt source               destination         

Chain black_list_ip_and_drop (1 references)
num  target     prot opt source               destination         
1    DROP       all  --  0.0.0.0/0            0.0.0.0/0            recent: SET name: ip_black_list side: source mask: 255.255.255.255

Chain check_add_to_black_list (1 references)
num  target     prot opt source               destination         
1    RETURN     udp  --  0.0.0.0/0            0.0.0.0/0            udp dpt:69
2    RETURN     udp  --  0.0.0.0/0            0.0.0.0/0            udp dpt:161
3    black_list_ip_and_drop  all  --  0.0.0.0/0            0.0.0.0/0            recent: UPDATE seconds: 1 reap hit_count: 20 TTL-Match name: ip_list side: source mask: 255.255.255.255
4               all  --  0.0.0.0/0            0.0.0.0/0            recent: SET name: ip_list side: source mask: 255.255.255.255

Chain drop_when_bad_state (1 references)
num  target     prot opt source               destination         
1    DROP       all  --  0.0.0.0/0            0.0.0.0/0            state INVALID

Chain drop_when_marked_packet (1 references)
num  target     prot opt source               destination         
1    REJECT     tcp  --  0.0.0.0/0            0.0.0.0/0            mark match 0x1 reject-with tcp-reset
2    REJECT     all  --  0.0.0.0/0            0.0.0.0/0            mark match 0x1 reject-with icmp-port-unreachable

Chain drop_when_max_session (1 references)
num  target     prot opt source               destination         
1    REJECT     tcp  --  0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:2222 #conn dst/32 > 10 reject-with tcp-reset
2    REJECT     tcp  --  0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:2024 #conn dst/32 > 10 reject-with tcp-reset
3    REJECT     tcp  --  0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:830 #conn dst/32 > 10 reject-with tcp-reset

Chain drop_when_part_of_black_list (1 references)
num  target     prot opt source               destination         
1    RETURN     icmp --  0.0.0.0/0            0.0.0.0/0           
2    RETURN     udp  --  0.0.0.0/0            0.0.0.0/0            udp dpt:7
3    RETURN     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:7
4    RETURN     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:2222
5    RETURN     all  --  0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED
6    DROP       all  --  0.0.0.0/0            0.0.0.0/0            recent: CHECK seconds: 120 reap name: ip_black_list side: source mask: 255.255.255.255

Chain drop_when_rate_limited (1 references)
num  target     prot opt source               destination         
1    RETURN     icmp --  0.0.0.0/0            0.0.0.0/0            limit: avg 5/sec burst 10
2    DROP       icmp --  0.0.0.0/0            0.0.0.0/0           
3    RETURN     udp  --  0.0.0.0/0            0.0.0.0/0            udp dpt:7 limit: avg 5/sec burst 10
4    DROP       udp  --  0.0.0.0/0            0.0.0.0/0            udp dpt:7
5    RETURN     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:7 limit: avg 5/sec burst 10
6    DROP       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:7
7    RETURN     udp  --  0.0.0.0/0            0.0.0.0/0            state NEW limit: avg 5/sec burst 10
8    DROP       udp  --  0.0.0.0/0            0.0.0.0/0            state NEW
9    RETURN     tcp  --  0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:2024 limit: avg 5/sec burst 10
10   DROP       tcp  --  0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:2024
11   RETURN     tcp  --  0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:830 limit: avg 5/sec burst 10
12   DROP       tcp  --  0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:830

Chain handle_mgnt (2 references)
num  target     prot opt source               destination         
1    packet_filter  all  --  0.0.0.0/0            0.0.0.0/0           

Chain mark_handle_mgnt (1 references)
num  target     prot opt source               destination         
1    MARK       udp  --  0.0.0.0/0            0.0.0.0/0            udp dpt:161 MARK set 0x1
2    MARK       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:4565 MARK set 0x1
3    MARK       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:4569 MARK set 0x1
4    MARK       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:10999 MARK set 0x1

Chain packet_filter (1 references)
num  target     prot opt source               destination         
1    drop_when_part_of_black_list  all  --  0.0.0.0/0            0.0.0.0/0           
2    drop_when_bad_state  all  --  0.0.0.0/0            0.0.0.0/0           
3    mark_handle_mgnt  all  --  0.0.0.0/0            0.0.0.0/0           
4    drop_when_marked_packet  all  --  0.0.0.0/0            0.0.0.0/0           
5    drop_when_rate_limited  all  --  0.0.0.0/0            0.0.0.0/0           
6    drop_when_max_session  all  --  0.0.0.0/0            0.0.0.0/0           
7    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED
8    check_add_to_black_list  all  --  0.0.0.0/0            0.0.0.0/0           
/isam/scripts #


./common_network_functions_iptables.sh:   $IPTABLES -t raw -A drop_when_bad_icmp -p icmp --icmp-type redirect -j DROP
./common_network_functions_iptables.sh:   $IPTABLES -t raw -A drop_when_bad_icmp -p icmp --icmp-type timestamp-request -j DROP
./common_network_functions_iptables.sh:   $IPTABLES -t raw -A drop_when_bad_icmp -p icmp --icmp-type 15 -j DROP
./common_network_functions_iptables.sh:   $IPTABLES -t raw -A drop_when_bad_icmp -p icmp --icmp-type address-mask-request -j DROP
./common_network_functions_iptables.sh:      $IP6TABLES -t raw -A drop_when_bad_icmp -p icmpv6 --icmpv6-type redirect -j DROP
./common_network_functions_iptables.sh:    $IPTABLES -t filter -A drop_when_rate_limited -p icmp -j DROP
./common_network_functions_iptables.sh:      $IP6TABLES -t filter -A drop_when_rate_limited -p icmpv6 -j DROP



ICMP类型
TYPE	CODE	Description	Query	Error
0	0	Echo Reply——回显应答（Ping应答）	x	 
3	0	Network Unreachable——网络不可达	 	x
3	1	Host Unreachable——主机不可达	 	x
3	2	Protocol Unreachable——协议不可达	 	x
3	3	Port Unreachable——端口不可达	 	x
3	4	Fragmentation needed but no frag. bit set——需要进行分片但设置不分片比特	 	x
3	5	Source routing failed——源站选路失败	 	x
3	6	Destination network unknown——目的网络未知	 	x
3	7	Destination host unknown——目的主机未知	 	x
3	8	Source host isolated (obsolete)——源主机被隔离（作废不用）	 	x
3	9	Destination network administratively prohibited——目的网络被强制禁止	 	x
3	10	Destination host administratively prohibited——目的主机被强制禁止	 	x
3	11	Network unreachable for TOS——由于服务类型TOS，网络不可达	 	x
3	12	Host unreachable for TOS——由于服务类型TOS，主机不可达	 	x
3	13	Communication administratively prohibited by filtering——由于过滤，通信被强制禁止	 	x
3	14	Host precedence violation——主机越权	 	x
3	15	Precedence cutoff in effect——优先中止生效	 	x
4	0	Source quench——源端被关闭（基本流控制）	 	 
5	0	Redirect for network——对网络重定向	 	 
5	1	Redirect for host——对主机重定向	 	 
5	2	Redirect for TOS and network——对服务类型和网络重定向	 	 
5	3	Redirect for TOS and host——对服务类型和主机重定向	 	 
8	0	Echo request——回显请求（Ping请求）	x	 
9	0	Router advertisement——路由器通告	 	 
10	0	Route solicitation——路由器请求	 	 
11	0	TTL equals 0 during transit——传输期间生存时间为0	 	x
11	1	TTL equals 0 during reassembly——在数据报组装期间生存时间为0	 	x
12	0	IP header bad (catchall error)——坏的IP首部（包括各种差错）	 	x
12	1	Required options missing——缺少必需的选项	 	x
13	0	Timestamp request (obsolete)——时间戳请求（作废不用）	x	 
14	 	Timestamp reply (obsolete)——时间戳应答（作废不用）	x	 
15	0	Information request (obsolete)——信息请求（作废不用）	x	 
16	0	Information reply (obsolete)——信息应答（作废不用）	x	 
17	0	Address mask request——地址掩码请求	x	 
18	0	Address mask reply——地址掩码应答		


查询命令  :  iptables -nvL INPUT



~ # ifconfig 
eth-debug Link encap:Ethernet  HWaddr 08:47:D0:0F:1D:4A  
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

eth-nta   Link encap:Ethernet  HWaddr 06:00:00:00:00:A0  
          UP BROADCAST RUNNING NOARP PROMISC SLAVE MULTICAST  MTU:9600  Metric:1
          RX packets:133794267 errors:0 dropped:1 overruns:0 frame:0
          TX packets:765650 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:31744073977 (29.5 GiB)  TX bytes:87558226 (83.5 MiB)

eth0      Link encap:Ethernet  HWaddr 08:47:D0:0F:1D:4A  
          UP BROADCAST RUNNING MULTICAST  MTU:9600  Metric:1
          RX packets:133794267 errors:0 dropped:0 overruns:0 frame:0
          TX packets:765729 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:34687547851 (32.3 GiB)  TX bytes:87564307 (83.5 MiB)

eth1      Link encap:Ethernet  HWaddr 06:00:00:00:00:78  
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:3054 errors:0 dropped:0 overruns:0 frame:0
          TX packets:3060 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:377464 (368.6 KiB)  TX bytes:259712 (253.6 KiB)

inband    Link encap:Ethernet  HWaddr 08:47:D0:0F:1D:4A  
          inet6 addr: fe80::a47:d0ff:fe0f:1d4a/64 Scope:Link
          UP BROADCAST RUNNING  MTU:9600  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:68 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 B)  TX bytes:4928 (4.8 KiB)

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:4163282 errors:0 dropped:0 overruns:0 frame:0
          TX packets:4163282 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1 
          RX bytes:418026598 (398.6 MiB)  TX bytes:418026598 (398.6 MiB)

tap-fwd   Link encap:Ethernet  HWaddr 7A:BB:47:A6:8B:9B  
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:628626 errors:0 dropped:0 overruns:0 frame:0
          TX packets:765418 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:48161049 (45.9 MiB)  TX bytes:70253416 (66.9 MiB)

tap-fwd.4094 Link encap:Ethernet  HWaddr 06:00:00:00:00:A0  
          inet addr:169.254.1.5  Bcast:169.254.255.255  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:628626 errors:0 dropped:0 overruns:0 frame:0
          TX packets:765418 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:36845781 (35.1 MiB)  TX bytes:67191744 (64.0 MiB)


1、命令 -A, --append
范例：iptables -A INPUT -p tcp --dport 80 -j ACCEPT
说明 ：新增规则到INPUT规则链中，规则时接到所有目的端口为80的数据包的流入连接，该规则将会成为规则链中的最后一条规则。
2、命令 -D, --delete
范例：iptables -D INPUT -p tcp --dport 80 -j ACCEPT
或    ： iptables -D INPUT 1
说明： 从INPUT规则链中删除上面建立的规则，可输入完整规则，或直接指定规则编号加以删除。
3、命令 -R, --replace
范例： iptables -R INPUT 1 -s 192.168.0.1 -j DROP
说明 取代现行第一条规则，规则被取代后并不会改变顺序。
4、命令 -I, --insert
范例：iptables -I INPUT 1 -p tcp --dport 80 -j ACCEPT
说明： 在第一条规则前插入一条规则，原本该位置上的规则将会往后移动一个顺位。
5、命令 -L, --list
范例： iptables -L INPUT
说明：列出INPUT规则链中的所有规则。
6、命令 -F, --flush
范例： iptables -F INPUT
说明： 删除INPUT规则链中的所有规则。
7、命令 -Z, --zeroLINUX教程  centos教程
范例：iptables -Z INPUT
说明 将INPUT链中的数据包计数器归零。它是计算同一数据包出现次数，过滤阻断式攻击不可少的工具。
8、命令 -N, --new-chain
范例： iptables -N denied
说明： 定义新的规则链。
9、命令 -X, --delete-chain
范例： iptables -X denied
说明： 删除某个规则链。
10、命令 -P, --policy
范例 ：iptables -P INPUT DROP
说明 ：定义默认的过滤策略。 数据包没有找到符合的策略，则根据此预设方式处理。
11、命令 -E, --rename-chain
范例： iptables -E denied disallowed
说明： 修改某自订规则链的名称。


 iptables -p icmp –help

icmp match options:
[!] --icmp-type typename        match icmp type
[!] --icmp-type type[/code]     (or numeric type or type/code)
Valid ICMP Types:
any
echo-reply (pong)
destination-unreachable
   network-unreachable
   host-unreachable
   protocol-unreachable
   port-unreachable
   fragmentation-needed
   source-route-failed
   network-unknown
   host-unknown
   network-prohibited
   host-prohibited
   TOS-network-unreachable
   TOS-host-unreachable
   communication-prohibited
   host-precedence-violation
   precedence-cutoff
source-quench
redirect
   network-redirect
   host-redirect
   TOS-network-redirect
   TOS-host-redirect
echo-request (ping)
router-advertisement
router-solicitation
time-exceeded (ttl-exceeded)
   ttl-zero-during-transit
   ttl-zero-during-reassembly
parameter-problem
   ip-header-bad
   required-option-missing
timestamp-request
timestamp-reply
address-mask-request
address-mask-reply


（二）常用封包比对参数：
1、参数 -p, --protocol
范例：iptables -A INPUT -p tcpLINUX教程  centos教程
说明：比对通讯协议类型是否相符，可以使用 ! 运算子进行反向比对，例如：-p ! tcp ，意思是指除 tcp 以外的其它类型，包含udp、icmp ...等。如果要比对所有类型，则可以使用 all 关键词，例如：-p all。
2、参数 -s, --src, --source
范例: iptables -A INPUT -s 192.168.1.100
说明：用来比对数据包的来源IP，可以比对单机或网络，比对网络时请用数字来表示屏蔽，例如：-s 192.168.0.0/24，比对 IP 时可以使用!运算子进行反向比对，例如：-s ! 192.168.0.0/24。
3、参数 -d, --dst, --destination
范例： iptables -A INPUT -d 192.168.1.100
说明：用来比对封包的目的地 IP，设定方式同上。
4、参数 -i, --in-interface
范例 iptables -A INPUT -i  lo
说明:用来比对数据包是从哪个网卡进入，可以使用通配字符 + 来做大范围比对，如：-i eth+ 表示所有的 ethernet 网卡，也可以使用 ! 运算子进行反向比对，如：-i ! eth0。这里lo指本地换回接口。
5、参数 -o, --out-interface
范例：iptables -A FORWARD -o eth0
说明：用来比对数据包要从哪个网卡流出，设定方式同上。
6、参数 --sport, --source-port
范例：iptables -A INPUT -p tcp --sport 22
说明：用来比对数据的包的来源端口号，可以比对单一端口，或是一个范围，例如：--sport 22:80，表示从 22 到 80 端口之间都算是符合件，如果要比对不连续的多个端口，则必须使用 --multiport 参数，详见后文。比对端口号时，可以使用 ! 运算子进行反向比对。
7、参数 --dport, --destination-port
范例 iptables -A INPUT -p tcp --dport 22
说明 用来比对封包的目的地端口号，设定方式同上。
8、参数 --tcp-flags
范例：iptables -p tcp --tcp-flags SYN,FIN,ACK SYN
说明：比对 TCP 封包的状态标志号，参数分为两个部分，第一个部分列举出想比对的标志号，第二部分则列举前述标志号中哪些有被设，未被列举的标志号必须是空的。TCP 状态标志号包括：SYN（同步）、ACK（应答）、FIN（结束）、RST（重设）、URG（紧急）PSH（强迫推送） 等均可使用于参数中，除此之外还可以使用关键词 ALL 和 NONE 进行比对。比对标志号时，可以使用 ! 运算子行反向比对。
9、参数 --syn
范例：iptables -p tcp --syn
说明：用来比对是否为要求联机之TCP 封包，与 iptables -p tcp --tcp-flags SYN,FIN,ACK SYN 的作用完全相同，如果使用 !运算子，可用来比对非要求联机封包。
10、参数 -m multiport --source-port
范例： iptables -A INPUT -p tcp -m multiport --source-port 22,53,80,110 -j ACCEPT
说明 用来比对不连续的多个来源端口号，一次最多可以比对 15 个端口，可以使用 ! 运算子进行反向比对。
11、参数 -m multiport --destination-port
范例 ：iptables -A INPUT -p tcp -m multiport --destination-port 22,53,80,110 -j ACCEPT
说明：用来比对不连续的多个目的地端口号，设定方式同上。
12、参数 -m multiport --port
范例：iptables -A INPUT -p tcp -m multiport --port 22,53,80,110 -j ACCEPT
说明：这个参数比较特殊，用来比对来源端口号和目的端口号相同的数据包，设定方式同上。注意：在本范例中，如果来源端口号为 80，目的地端口号为 110，这种数据包并不算符合条件。
13、参数 --icmp-type
范例：iptables -A INPUT -p icmp --icmp-type 8 -j DROP
说明：用来比对 ICMP 的类型编号，可以使用代码或数字编号来进行比对。请打 iptables -p icmp --help 来查看有哪些代码可用。这里是指禁止ping如，但是可以从该主机ping出。
14、参数 -m limit --limit
范例：iptables -A INPUT -m limit --limit 3/hour
说明：用来比对某段时间内数据包的平均流量，上面的例子是用来比对：每小时平均流量是否超过一次3个数据包。 除了每小时平均次外，也可以每秒钟、每分钟或每天平均一次，默认值为每小时平均一次，参数如后： /second、 /minute、/day。 除了进行数据包数量的比对外，设定这个参数也会在条件达成时，暂停数据包的比对动作，以避免因洪水攻击法，导致服务被阻断。
15、参数 --limit-burst
范例：iptables -A INPUT -m limit --limit-burst 5
说明：用来比对瞬间大量封包的数量，上面的例子是用来比对一次同时涌入的封包是否超过 5 个（这是默认值），超过此上限的封将被直接丢弃。使用效果同上。
16、参数 -m mac --mac-source
范例：iptables -A INPUT -m mac --mac-source 00:00:00:00:00:01 -j ACCEPT
说明：用来比对数据包来源网络接口的硬件地址，这个参数不能用在 OUTPUT 和 Postrouting 规则链上，这是因为封包要送出到网后，才能由网卡驱动程序透过 ARP 通讯协议查出目的地的 MAC 地址，所以 iptables 在进行封包比对时，并不知道封包会送到个网络接口去。linux基础
17、参数 --mark
范例：iptables -t mangle -A INPUT -m mark --mark 1
说明：用来比对封包是否被表示某个号码，当封包被比对成功时，我们可以透过 MARK 处理动作，将该封包标示一个号码，号码最不可以超过 4294967296。linux基础
18、参数 -m owner --uid-owner
范例：iptables -A OUTPUT -m owner --uid-owner 500
说明：用来比对来自本机的封包，是否为某特定使用者所产生的，这样可以避免服务器使用 root 或其它身分将敏感数据传送出，可以降低系统被骇的损失。可惜这个功能无法比对出来自其它主机的封包。
19、参数 -m owner --gid-owner
范例：iptables -A OUTPUT -m owner --gid-owner 0
说明：用来比对来自本机的数据包，是否为某特定使用者群组所产生的，使用时机同上。
20、参数 -m owner --pid-owner
范例：iptables -A OUTPUT -m owner --pid-owner 78
说明：用来比对来自本机的数据包，是否为某特定行程所产生的，使用时机同上。
21、参数 -m owner --sid-owner
范例： iptables -A OUTPUT -m owner --sid-owner 100
说明： 用来比对来自本机的数据包，是否为某特定联机（Session ID）的响应封包，使用时机同上。
22、参数 -m state --state
范例： iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
说明 用来比对联机状态，联机状态共有四种：INVALID、ESTABLISHED、NEW 和 RELATED。
23、iptables -L -n -v  可以查看计数器
INVALID 表示该数据包的联机编号（Session ID）无法辨识或编号不正确。ESTABLISHED 表示该数据包属于某个已经建立的联机。NEW 表示该数据包想要起始一个联机（重设联机或将联机重导向）。RELATED 表示该数据包是属于某个已经建立的联机，所建立的新联机。例如：FTP-DATA 联机必定是源自某个 FTP 联机。
（三）、常用的处理动作：
-j 参数用来指定要进行的处理动作，常用的处理动作包括：ACCEPT、REJECT、DROP、REDIRECT、MASQUERADE、LOG、DNAT、SNAT、MIRROR、QUEUE、RETURN、MARK。
分别说明如下：
ACCEPT 将数据包放行，进行完此处理动作后，将不再比对其它规则，直接跳往下一个规则链（natostrouting）。
REJECT 拦阻该数据包，并传送数据包通知对方，可以传送的数据包有几个选择：ICMP port-unreachable、ICMP echo-reply 或是tcp-reset（这个数据包会要求对方关闭联机），进行完此处理动作后，将不再比对其它规则，直接 中断过滤程序。 范例如下：
iptables -A FORWARD -p TCP --dport 22 -j REJECT --reject-with tcp-reset
DROP 丢弃包不予处理，进行完此处理动作后，将不再比对其它规则，直接中断过滤程序。
REDIRECT 将包重新导向到另一个端口（PNAT），进行完此处理动作后，将会继续比对其它规则。 这个功能可以用来实作通透式porxy 或用来保护 web 服务器。例如：
iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080
MASQUERADE 改写数据包来源 IP为防火墙 NIC IP，可以指定 port 对应的范围，进行完此处理动作后，直接跳往下一个规则（mangleostrouting）。这个功能与 SNAT 略有不同，当进行 IP 伪装时，不需指定要伪装成哪个 IP，IP 会从网卡直接读取，当使用拨号连接时，IP 通常是由 ISP 公司的 DHCP 服务器指派的，这个时候 MASQUERADE 特别有用。范例如下：linux基础
iptables -t nat -A POSTROUTING -p TCP -j MASQUERADE --to-ports 1024-31000
LOG 将封包相关讯息纪录在 /var/log 中，详细位置请查阅 /etc/syslog.conf 配置文件，进行完此处理动作后，将会继续比对其规则。例如：
iptables -A INPUT -p tcp -j LOG --log-prefix "INPUT packets"
SNAT 改写封包来源 IP 为某特定 IP 或 IP 范围，可以指定 port 对应的范围，进行完此处理动作后，将直接跳往下一个规则（mangleostrouting）。范例如下：
iptables -t nat -A POSTROUTING -p tcp-o eth0 -j SNAT --to-source 194.236.50.155-194.236.50.160:1024-32000
DNAT 改写封包目的地 IP 为某特定 IP 或 IP 范围，可以指定 port 对应的范围，进行完此处理动作后，将会直接跳往下一个规炼（filter:input 或 filter:forward）。范例如下：
iptables -t nat -A PREROUTING -p tcp -d 15.45.23.67 --dport 80 -j DNAT --to-destination
192.168.1.1-192.168.1.10:80-100
MIRROR 镜像数据包，也就是将来源 IP 与目的地 IP 对调后，将数据包送回，进行完此处理动作后，将会中断过滤程序。
QUEUE 中断过滤程序，将数据包放入队列，交给其它程序处理。透过自行开发的处理程序，可以进行其它应用，例如：计算联机费.......等。
RETURN 结束在目前规则链中的过滤程序，返回主规则链继续过滤，如果把自订规则链看成是一个子程序，那么这个动作，就相当提早结束子程序并返回到主程序中。
MARK 将数据包标上某个代号，以便提供作为后续过滤的条件判断依据，进行完此处理动作后，将会继续比对其它规则。范例如下：
iptables -t mangle -A PREROUTING -p tcp --dport 22 -j MARK --set-mark 2
以上用来大量的实例来说明iptables的参数和命令的用法，如果有朋友有配置iptables的需求可以QQ联系我：1600490666，或者将需求发给我，为您配置相应的策略。

ssh -p923 root@135.251.200.201
ssh root@169.254.1.3 -p 2222

iptables -A INPUT -p icmp -j LOG --log-prefix "INPUT packets"



/mnt/prozone_rsf/var # iptables -L -n -v |grep icmp
    0     0 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            mark match 0x1 reject-with icmp-port-unreachable
 172K 7579K RETURN     icmp --  *      *       0.0.0.0/0            0.0.0.0/0           
 172K 7579K RETURN     icmp --  *      *       0.0.0.0/0            0.0.0.0/0            limit: avg 5/sec burst 10
    0     0 DROP       icmp --  *      *       0.0.0.0/0            0.0.0.0/0   


~ # iptables -L -n -v  |grep icmp
    0     0 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            mark match 0x1 reject-with icmp-port-unreachable
  188  8272 RETURN     icmp --  *      *       0.0.0.0/0            0.0.0.0/0           
  188  8272 RETURN     icmp --  *      *       0.0.0.0/0            0.0.0.0/0            limit: avg 5/sec burst 10
0     0 DROP       icmp --  *      *       0.0.0.0/0            0.0.0.0/0           



LOG 将封包相关讯息纪录在 /var/log 中，详细位置请查阅 /etc/syslog.conf 配置文件，进行完此处理动作后，将会继续比对其规则。例如：
iptables -A INPUT -p tcp -j LOG --log-prefix "INPUT packets"


# iptables -L -n -v  |grep icmp
    0     0 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            mark match 0x1 reject-with icmp-port-unreachable
    0     0 RETURN     icmp --  *      *       0.0.0.0/0            0.0.0.0/0           
    0     0 RETURN     icmp --  *      *       0.0.0.0/0            0.0.0.0/0            limit: avg 5/sec burst 10
    0     0 DROP       icmp --  *      *       0.0.0.0/0            0.0.0.0/


iptables -Z INPUT

/isam/scripts/common_network_functions_iptables.sh:   $IPTABLES -t raw -A drop_when_bad_icmp -p icmp --icmp-type redirect -j DROP
/isam/scripts/common_network_functions_iptables.sh:   $IPTABLES -t raw -A drop_when_bad_icmp -p icmp --icmp-type timestamp-request -j DROP
/isam/scripts/common_network_functions_iptables.sh:   $IPTABLES -t raw -A drop_when_bad_icmp -p icmp --icmp-type 15 -j DROP
/isam/scripts/common_network_functions_iptables.sh:   $IPTABLES -t raw -A drop_when_bad_icmp -p icmp --icmp-type address-mask-request -j DROP


/isam/scripts/common_network_functions_iptables.sh:   $IPTABLES -t raw -A drop_when_bad_icmp -p icmp --icmp-type redirect -j DROP
/isam/scripts/common_network_functions_iptables.sh:   $IPTABLES -t raw -A drop_when_bad_icmp -p icmp --icmp-type timestamp-request -j DROP
/isam/scripts/common_network_functions_iptables.sh:   $IPTABLES -t raw -A drop_when_bad_icmp -p icmp --icmp-type 15 -j DROP
/isam/scripts/common_network_functions_iptables.sh:   $IPTABLES -t raw -A drop_when_bad_icmp -p icmp --icmp-type address-mask-request -j DROP



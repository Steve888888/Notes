RAII 全称就Resource acquisition is initialization. 意为资源获取要通过构造函数初始化，然后析构函数负责释放资源。
大部分时候又被用于做Scope Guard，Scope Guard同lambda服用，效果更佳，见下文。

RAII替我们实现了”某个操作在任何分支结束的时候，会被执行，且被执行一次“。而利用这个保证，我们可以不再那么麻烦和痛苦的叮嘱自己一定要记得释放内存，
一定不要释放两次及以上。而任何需要这个效果的都可以而且也推荐使用RAII来实现，不要依赖程序员的自觉和认真！

为了充分利用右值的资源，减少不必要的拷贝，C++11引入了右值引用(&&)，移动构造函数，移动复制运算符以及std::move。
在没有右值引用之前，为了使用临时变量，通常定义const的左值引用，比如const string&，
在有了右值引用之后，为了使用右值语义，不要把参数定义为常量左值引用，否则，传递右值时调用的时拷贝构造函数

在C++11中，标准库在中提供了一个有用的函数std::move，std::move并不能移动任何东西，它唯一的功能是将一个左值引用强制转化为右值引用，
继而可以通过右值引用使用该值，以用于移动语义。从实现上讲，std::move基本等同于一个类型转换：static_cast<T&&>(lvalue);
